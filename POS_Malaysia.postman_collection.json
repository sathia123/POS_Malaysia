{
	"info": {
		"_postman_id": "b554097a-8e27-4596-9de7-4e5df9352213",
		"name": "POS_Malaysia",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16645332"
	},
	"item": [
		{
			"name": "PostFromCountry",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response schema is valid\", function () {\r",
							"  var schema = {\r",
							"    type: \"array\",\r",
							"    items: {\r",
							"      type: \"object\",\r",
							"      properties: {\r",
							"        stateNm: { type: \"string\" },\r",
							"        stateCd: { type: \"string\" },\r",
							"        city: { type: \"string\" },\r",
							"        postCode: { type: \"string\" }\r",
							"      },\r",
							"      required: [\"stateNm\", \"stateCd\", \"city\", \"postCode\"]\r",
							"    }\r",
							"  };\r",
							"\r",
							"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});\r",
							"// Test for response content type\r",
							"pm.test(\"Response has content type application/json\", function () {\r",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Updated status code test to check for a specific status code, such as 200\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Check if the response is not empty\r",
							"pm.test(\"Response is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - stateNm, stateCd, city, and postCode\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.stateNm).to.exist;\r",
							"        pm.expect(item.stateCd).to.exist;\r",
							"        pm.expect(item.city).to.exist;\r",
							"        pm.expect(item.postCode).to.exist;\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each stateCd is a valid state code\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.stateCd).to.match(/[A-Z]{3}/, \"State code should be a valid 3-letter code\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each postCode is a valid postal code format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.postCode).to.match(/^\\d{5}$/);\r",
							"    });\r",
							"});\r",
							" \r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"postCode\": \"84000\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www-api.pos.com.my/api/getStateByPostcode",
					"protocol": "https",
					"host": [
						"www-api",
						"pos",
						"com",
						"my"
					],
					"path": [
						"api",
						"getStateByPostcode"
					]
				}
			},
			"response": []
		},
		{
			"name": "CalculateRate - Overseas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response has the correct schema\", function () {\r",
							"    pm.response.to.have.jsonSchema({\r",
							"        type: 'array',\r",
							"        items: {\r",
							"            type: 'object',\r",
							"            properties: {\r",
							"                deliveryService: { type: 'string' },\r",
							"                zone: { type: 'string' },\r",
							"                estimateDelivery: { type: 'string' },\r",
							"                HandlingCharge: { type: 'string' },\r",
							"                FuelCharge: { type: 'string' },\r",
							"                EssCharge: { type: 'string' },\r",
							"                totalCharge: { type: 'string' },\r",
							"                postage: { type: 'string' },\r",
							"                maxWeight: { type: 'string' },\r",
							"                limitOfInsuran: { type: 'string' },\r",
							"                trackNTrace: { type: 'string' },\r",
							"                name: { type: 'string' },\r",
							"                showOutletLocatorButton: { type: 'boolean' },\r",
							"                isDomestic: { type: 'boolean' },\r",
							"                totalAmount: { type: 'string' }\r",
							"            },\r",
							"            required: ['deliveryService', 'zone', 'estimateDelivery', 'HandlingCharge', 'FuelCharge', 'EssCharge', 'totalCharge', 'postage', 'maxWeight', 'trackNTrace', 'name', 'showOutletLocatorButton', 'isDomestic', 'totalAmount']\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.json()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"country\": \"Albania\",\r\n  \"weight\": 5\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www-api.pos.com.my/api/price",
					"protocol": "https",
					"host": [
						"www-api",
						"pos",
						"com",
						"my"
					],
					"path": [
						"api",
						"price"
					]
				}
			},
			"response": []
		},
		{
			"name": "CalculateRate - Domestic",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify Content-Type header is set to application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"  var schema = {\r",
							"    type: \"array\",\r",
							"    items: {\r",
							"      type: \"object\",\r",
							"      properties: {\r",
							"        first: { type: \"string\" },\r",
							"        next: { type: \"string\" },\r",
							"        amount: { type: \"string\" },\r",
							"        maxWeight: { type: \"string\" },\r",
							"        totalAmount: { type: \"string\" },\r",
							"        zone: { type: \"string\" },\r",
							"        fuelCharge: { type: \"string\" },\r",
							"        handlingCharge: { type: \"string\" },\r",
							"        SST: { type: \"string\" },\r",
							"        PosCoverage: { type: \"string\" },\r",
							"        stateFrom: { type: \"string\" },\r",
							"        stateTo: { type: \"string\" },\r",
							"        Town: { type: \"string\" },\r",
							"        ODA: { type: \"string\" },\r",
							"        ODAPrice: { type: \"string\" },\r",
							"        SLA: { type: \"string\" },\r",
							"        isDomestic: { type: \"boolean\" },\r",
							"        name: { type: \"string\" },\r",
							"        estimateDelivery: { type: \"string\", format: \"date\" }\r",
							"      },\r",
							"      required: [\"first\", \"next\", \"amount\", \"maxWeight\", \"totalAmount\", \"zone\", \"fuelCharge\", \"handlingCharge\", \"SST\", \"PosCoverage\", \"stateFrom\", \"stateTo\", \"Town\", \"ODA\", \"ODAPrice\", \"SLA\", \"isDomestic\", \"name\", \"estimateDelivery\"]\r",
							"    }\r",
							"  };\r",
							"\r",
							"  var response = pm.response.json();\r",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify isDomestic is true\", function () {\r",
							"    var jsonData = pm.response.json(); \r",
							"    pm.expect(jsonData[0].isDomestic).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.json()).to.not.be.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"country\": \"Malaysia\",\r\n  \"weight\": 1,\r\n  \"postcodeFrom\": 35600,\r\n  \"postcodeTo\": 84000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www-api.pos.com.my/api/price",
					"protocol": "https",
					"host": [
						"www-api",
						"pos",
						"com",
						"my"
					],
					"path": [
						"api",
						"price"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAllCountries",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate response against JSON schema\", function () {\r",
							"  var schema = {\r",
							"    type: \"array\",\r",
							"    items: {\r",
							"      type: \"object\",\r",
							"      properties: {\r",
							"        CountryCode: { type: \"string\" },\r",
							"        CountryName: { type: \"string\" }\r",
							"      },\r",
							"      required: [\"CountryCode\", \"CountryName\"]\r",
							"    }\r",
							"  };\r",
							"\r",
							"  var response = pm.response.json();\r",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// Updated status code test to check for a specific status code, such as 200\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"// Add a test to check that the response is not empty\r",
							"pm.test(\"Response is not empty\", function () {\r",
							"    pm.expect(pm.response.json()).to.not.be.empty;\r",
							"});\r",
							"// Add a test to check that the response is not an empty array\r",
							"pm.test(\"Response is not an empty array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array').and.to.not.be.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www-api.pos.com.my/api/countries",
					"protocol": "https",
					"host": [
						"www-api",
						"pos",
						"com",
						"my"
					],
					"path": [
						"api",
						"countries"
					]
				},
				"description": "### GET /api/countries\n\nThis endpoint retrieves a list of countries.\n\n#### Request\n\n- Method: GET\n    \n- URL: `https://www-api.pos.com.my/api/countries`\n    \n- Headers:\n    \n    - Content-Type: application/json\n        \n- { \"postCode\": \"84000\" }\n    \n\n#### Response\n\nThe response is a JSON array with the following schema:\n\n``` json\n[\n    {\n        \"CountryCode\": \"string\",\n        \"CountryName\": \"string\"\n    }\n]\n\n ```\n\n- Status: 200 OK\n    \n- Content-Type: application/json"
			},
			"response": []
		}
	]
}